<?php
/**
 * GetOrderByIdResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Kwenta API
 *
 * Kwenta OpenAPI documentation
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * GetOrderByIdResponse Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetOrderByIdResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'GetOrderByIdResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'sellerOrderId' => 'string',
        'seller' => '\OpenAPI\Client\Model\GetOrderByIdResponseSeller',
        'type' => '\OpenAPI\Client\Model\OrderType',
        'ownerId' => 'string',
        'status' => '\OpenAPI\Client\Model\OrderStatus',
        'amount' => 'int',
        'currency' => '\OpenAPI\Client\Model\Currency',
        'redirectUrl' => 'string',
        'expiresAt' => '\DateTime',
        'createdAt' => '\DateTime',
        'payers' => '\OpenAPI\Client\Model\GetOrderByIdResponsePayer[]',
        'defaultLocale' => '\OpenAPI\Client\Model\SupportedLocale',
        'refundableAmount' => 'int',
        'refunds' => '\OpenAPI\Client\Model\GetOrderByIdResponseOrderRefund[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'sellerOrderId' => null,
        'seller' => null,
        'type' => null,
        'ownerId' => 'uuid',
        'status' => null,
        'amount' => null,
        'currency' => null,
        'redirectUrl' => 'url',
        'expiresAt' => 'date-time',
        'createdAt' => 'date-time',
        'payers' => null,
        'defaultLocale' => null,
        'refundableAmount' => null,
        'refunds' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'sellerOrderId' => false,
		'seller' => false,
		'type' => false,
		'ownerId' => false,
		'status' => false,
		'amount' => false,
		'currency' => false,
		'redirectUrl' => false,
		'expiresAt' => false,
		'createdAt' => false,
		'payers' => false,
		'defaultLocale' => false,
		'refundableAmount' => false,
		'refunds' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'sellerOrderId' => 'sellerOrderId',
        'seller' => 'seller',
        'type' => 'type',
        'ownerId' => 'ownerId',
        'status' => 'status',
        'amount' => 'amount',
        'currency' => 'currency',
        'redirectUrl' => 'redirectUrl',
        'expiresAt' => 'expiresAt',
        'createdAt' => 'createdAt',
        'payers' => 'payers',
        'defaultLocale' => 'defaultLocale',
        'refundableAmount' => 'refundableAmount',
        'refunds' => 'refunds'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'sellerOrderId' => 'setSellerOrderId',
        'seller' => 'setSeller',
        'type' => 'setType',
        'ownerId' => 'setOwnerId',
        'status' => 'setStatus',
        'amount' => 'setAmount',
        'currency' => 'setCurrency',
        'redirectUrl' => 'setRedirectUrl',
        'expiresAt' => 'setExpiresAt',
        'createdAt' => 'setCreatedAt',
        'payers' => 'setPayers',
        'defaultLocale' => 'setDefaultLocale',
        'refundableAmount' => 'setRefundableAmount',
        'refunds' => 'setRefunds'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'sellerOrderId' => 'getSellerOrderId',
        'seller' => 'getSeller',
        'type' => 'getType',
        'ownerId' => 'getOwnerId',
        'status' => 'getStatus',
        'amount' => 'getAmount',
        'currency' => 'getCurrency',
        'redirectUrl' => 'getRedirectUrl',
        'expiresAt' => 'getExpiresAt',
        'createdAt' => 'getCreatedAt',
        'payers' => 'getPayers',
        'defaultLocale' => 'getDefaultLocale',
        'refundableAmount' => 'getRefundableAmount',
        'refunds' => 'getRefunds'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('sellerOrderId', $data ?? [], null);
        $this->setIfExists('seller', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('ownerId', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('redirectUrl', $data ?? [], null);
        $this->setIfExists('expiresAt', $data ?? [], null);
        $this->setIfExists('createdAt', $data ?? [], null);
        $this->setIfExists('payers', $data ?? [], null);
        $this->setIfExists('defaultLocale', $data ?? [], null);
        $this->setIfExists('refundableAmount', $data ?? [], null);
        $this->setIfExists('refunds', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if (!is_null($this->container['sellerOrderId']) && (mb_strlen($this->container['sellerOrderId']) > 128)) {
            $invalidProperties[] = "invalid value for 'sellerOrderId', the character length must be smaller than or equal to 128.";
        }

        if (!is_null($this->container['sellerOrderId']) && (mb_strlen($this->container['sellerOrderId']) < 1)) {
            $invalidProperties[] = "invalid value for 'sellerOrderId', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['seller'] === null) {
            $invalidProperties[] = "'seller' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if (($this->container['amount'] < 1)) {
            $invalidProperties[] = "invalid value for 'amount', must be bigger than or equal to 1.";
        }

        if ($this->container['currency'] === null) {
            $invalidProperties[] = "'currency' can't be null";
        }
        if (!is_null($this->container['redirectUrl']) && !preg_match("/^https?:\/\/.+$/", $this->container['redirectUrl'])) {
            $invalidProperties[] = "invalid value for 'redirectUrl', must be conform to the pattern /^https?:\/\/.+$/.";
        }

        if ($this->container['createdAt'] === null) {
            $invalidProperties[] = "'createdAt' can't be null";
        }
        if ($this->container['payers'] === null) {
            $invalidProperties[] = "'payers' can't be null";
        }
        if ($this->container['refundableAmount'] === null) {
            $invalidProperties[] = "'refundableAmount' can't be null";
        }
        if ($this->container['refunds'] === null) {
            $invalidProperties[] = "'refunds' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The ID of the order
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets sellerOrderId
     *
     * @return string|null
     */
    public function getSellerOrderId()
    {
        return $this->container['sellerOrderId'];
    }

    /**
     * Sets sellerOrderId
     *
     * @param string|null $sellerOrderId The ID of the order in the seller's system
     *
     * @return self
     */
    public function setSellerOrderId($sellerOrderId)
    {
        if (is_null($sellerOrderId)) {
            throw new \InvalidArgumentException('non-nullable sellerOrderId cannot be null');
        }
        if ((mb_strlen($sellerOrderId) > 128)) {
            throw new \InvalidArgumentException('invalid length for $sellerOrderId when calling GetOrderByIdResponse., must be smaller than or equal to 128.');
        }
        if ((mb_strlen($sellerOrderId) < 1)) {
            throw new \InvalidArgumentException('invalid length for $sellerOrderId when calling GetOrderByIdResponse., must be bigger than or equal to 1.');
        }

        $this->container['sellerOrderId'] = $sellerOrderId;

        return $this;
    }

    /**
     * Gets seller
     *
     * @return \OpenAPI\Client\Model\GetOrderByIdResponseSeller
     */
    public function getSeller()
    {
        return $this->container['seller'];
    }

    /**
     * Sets seller
     *
     * @param \OpenAPI\Client\Model\GetOrderByIdResponseSeller $seller seller
     *
     * @return self
     */
    public function setSeller($seller)
    {
        if (is_null($seller)) {
            throw new \InvalidArgumentException('non-nullable seller cannot be null');
        }
        $this->container['seller'] = $seller;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \OpenAPI\Client\Model\OrderType
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \OpenAPI\Client\Model\OrderType $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets ownerId
     *
     * @return string|null
     */
    public function getOwnerId()
    {
        return $this->container['ownerId'];
    }

    /**
     * Sets ownerId
     *
     * @param string|null $ownerId ID of the payer who owns the order
     *
     * @return self
     */
    public function setOwnerId($ownerId)
    {
        if (is_null($ownerId)) {
            throw new \InvalidArgumentException('non-nullable ownerId cannot be null');
        }
        $this->container['ownerId'] = $ownerId;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \OpenAPI\Client\Model\OrderStatus
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \OpenAPI\Client\Model\OrderStatus $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return int
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param int $amount Total amount of the order expressed in the smallest unit of the currency.
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }

        if (($amount < 1)) {
            throw new \InvalidArgumentException('invalid value for $amount when calling GetOrderByIdResponse., must be bigger than or equal to 1.');
        }

        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return \OpenAPI\Client\Model\Currency
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param \OpenAPI\Client\Model\Currency $currency currency
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets redirectUrl
     *
     * @return string|null
     */
    public function getRedirectUrl()
    {
        return $this->container['redirectUrl'];
    }

    /**
     * Sets redirectUrl
     *
     * @param string|null $redirectUrl URL on your website to redirect the payer to after a successful payment.
     *
     * @return self
     */
    public function setRedirectUrl($redirectUrl)
    {
        if (is_null($redirectUrl)) {
            throw new \InvalidArgumentException('non-nullable redirectUrl cannot be null');
        }

        if ((!preg_match("/^https?:\/\/.+$/", ObjectSerializer::toString($redirectUrl)))) {
            throw new \InvalidArgumentException("invalid value for \$redirectUrl when calling GetOrderByIdResponse., must conform to the pattern /^https?:\/\/.+$/.");
        }

        $this->container['redirectUrl'] = $redirectUrl;

        return $this;
    }

    /**
     * Gets expiresAt
     *
     * @return \DateTime|null
     */
    public function getExpiresAt()
    {
        return $this->container['expiresAt'];
    }

    /**
     * Sets expiresAt
     *
     * @param \DateTime|null $expiresAt Expiration date of the order.
     *
     * @return self
     */
    public function setExpiresAt($expiresAt)
    {
        if (is_null($expiresAt)) {
            throw new \InvalidArgumentException('non-nullable expiresAt cannot be null');
        }
        $this->container['expiresAt'] = $expiresAt;

        return $this;
    }

    /**
     * Gets createdAt
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['createdAt'];
    }

    /**
     * Sets createdAt
     *
     * @param \DateTime $createdAt The date and time when the entity was created
     *
     * @return self
     */
    public function setCreatedAt($createdAt)
    {
        if (is_null($createdAt)) {
            throw new \InvalidArgumentException('non-nullable createdAt cannot be null');
        }
        $this->container['createdAt'] = $createdAt;

        return $this;
    }

    /**
     * Gets payers
     *
     * @return \OpenAPI\Client\Model\GetOrderByIdResponsePayer[]
     */
    public function getPayers()
    {
        return $this->container['payers'];
    }

    /**
     * Sets payers
     *
     * @param \OpenAPI\Client\Model\GetOrderByIdResponsePayer[] $payers payers
     *
     * @return self
     */
    public function setPayers($payers)
    {
        if (is_null($payers)) {
            throw new \InvalidArgumentException('non-nullable payers cannot be null');
        }
        $this->container['payers'] = $payers;

        return $this;
    }

    /**
     * Gets defaultLocale
     *
     * @return \OpenAPI\Client\Model\SupportedLocale|null
     */
    public function getDefaultLocale()
    {
        return $this->container['defaultLocale'];
    }

    /**
     * Sets defaultLocale
     *
     * @param \OpenAPI\Client\Model\SupportedLocale|null $defaultLocale defaultLocale
     *
     * @return self
     */
    public function setDefaultLocale($defaultLocale)
    {
        if (is_null($defaultLocale)) {
            throw new \InvalidArgumentException('non-nullable defaultLocale cannot be null');
        }
        $this->container['defaultLocale'] = $defaultLocale;

        return $this;
    }

    /**
     * Gets refundableAmount
     *
     * @return int
     */
    public function getRefundableAmount()
    {
        return $this->container['refundableAmount'];
    }

    /**
     * Sets refundableAmount
     *
     * @param int $refundableAmount refundableAmount
     *
     * @return self
     */
    public function setRefundableAmount($refundableAmount)
    {
        if (is_null($refundableAmount)) {
            throw new \InvalidArgumentException('non-nullable refundableAmount cannot be null');
        }
        $this->container['refundableAmount'] = $refundableAmount;

        return $this;
    }

    /**
     * Gets refunds
     *
     * @return \OpenAPI\Client\Model\GetOrderByIdResponseOrderRefund[]
     */
    public function getRefunds()
    {
        return $this->container['refunds'];
    }

    /**
     * Sets refunds
     *
     * @param \OpenAPI\Client\Model\GetOrderByIdResponseOrderRefund[] $refunds refunds
     *
     * @return self
     */
    public function setRefunds($refunds)
    {
        if (is_null($refunds)) {
            throw new \InvalidArgumentException('non-nullable refunds cannot be null');
        }
        $this->container['refunds'] = $refunds;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


