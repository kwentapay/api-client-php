<?php
/**
 * RefundsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Kwenta API
 *
 * Kwenta OpenAPI documentation
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * RefundsApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class RefundsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'divideOrderRefund' => [
            'application/json',
        ],
        'dividePayerRefund' => [
            'application/json',
        ],
        'getOrderRefundById' => [
            'application/json',
        ],
        'getOrdersRefunds' => [
            'application/json',
        ],
        'getPayerRefundById' => [
            'application/json',
        ],
        'refundOrder' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation divideOrderRefund
     *
     * Divide order refund
     *
     * @param  string $orderRefundId orderRefundId (required)
     * @param  \OpenAPI\Client\Model\DividePayerRefundBody $dividePayerRefundBody dividePayerRefundBody (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['divideOrderRefund'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function divideOrderRefund($orderRefundId, $dividePayerRefundBody, string $contentType = self::contentTypes['divideOrderRefund'][0])
    {
        $this->divideOrderRefundWithHttpInfo($orderRefundId, $dividePayerRefundBody, $contentType);
    }

    /**
     * Operation divideOrderRefundWithHttpInfo
     *
     * Divide order refund
     *
     * @param  string $orderRefundId (required)
     * @param  \OpenAPI\Client\Model\DividePayerRefundBody $dividePayerRefundBody (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['divideOrderRefund'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function divideOrderRefundWithHttpInfo($orderRefundId, $dividePayerRefundBody, string $contentType = self::contentTypes['divideOrderRefund'][0])
    {
        $request = $this->divideOrderRefundRequest($orderRefundId, $dividePayerRefundBody, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation divideOrderRefundAsync
     *
     * Divide order refund
     *
     * @param  string $orderRefundId (required)
     * @param  \OpenAPI\Client\Model\DividePayerRefundBody $dividePayerRefundBody (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['divideOrderRefund'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function divideOrderRefundAsync($orderRefundId, $dividePayerRefundBody, string $contentType = self::contentTypes['divideOrderRefund'][0])
    {
        return $this->divideOrderRefundAsyncWithHttpInfo($orderRefundId, $dividePayerRefundBody, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation divideOrderRefundAsyncWithHttpInfo
     *
     * Divide order refund
     *
     * @param  string $orderRefundId (required)
     * @param  \OpenAPI\Client\Model\DividePayerRefundBody $dividePayerRefundBody (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['divideOrderRefund'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function divideOrderRefundAsyncWithHttpInfo($orderRefundId, $dividePayerRefundBody, string $contentType = self::contentTypes['divideOrderRefund'][0])
    {
        $returnType = '';
        $request = $this->divideOrderRefundRequest($orderRefundId, $dividePayerRefundBody, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'divideOrderRefund'
     *
     * @param  string $orderRefundId (required)
     * @param  \OpenAPI\Client\Model\DividePayerRefundBody $dividePayerRefundBody (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['divideOrderRefund'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function divideOrderRefundRequest($orderRefundId, $dividePayerRefundBody, string $contentType = self::contentTypes['divideOrderRefund'][0])
    {

        // verify the required parameter 'orderRefundId' is set
        if ($orderRefundId === null || (is_array($orderRefundId) && count($orderRefundId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orderRefundId when calling divideOrderRefund'
            );
        }

        // verify the required parameter 'dividePayerRefundBody' is set
        if ($dividePayerRefundBody === null || (is_array($dividePayerRefundBody) && count($dividePayerRefundBody) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dividePayerRefundBody when calling divideOrderRefund'
            );
        }


        $resourcePath = '/refunds/order/{orderRefundId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($orderRefundId !== null) {
            $resourcePath = str_replace(
                '{' . 'orderRefundId' . '}',
                ObjectSerializer::toPathValue($orderRefundId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($dividePayerRefundBody)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($dividePayerRefundBody));
            } else {
                $httpBody = $dividePayerRefundBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation dividePayerRefund
     *
     * Divide payer refund
     *
     * @param  string $payerRefundId payerRefundId (required)
     * @param  \OpenAPI\Client\Model\DividePayerRefundBody $dividePayerRefundBody dividePayerRefundBody (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dividePayerRefund'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function dividePayerRefund($payerRefundId, $dividePayerRefundBody, string $contentType = self::contentTypes['dividePayerRefund'][0])
    {
        $this->dividePayerRefundWithHttpInfo($payerRefundId, $dividePayerRefundBody, $contentType);
    }

    /**
     * Operation dividePayerRefundWithHttpInfo
     *
     * Divide payer refund
     *
     * @param  string $payerRefundId (required)
     * @param  \OpenAPI\Client\Model\DividePayerRefundBody $dividePayerRefundBody (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dividePayerRefund'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function dividePayerRefundWithHttpInfo($payerRefundId, $dividePayerRefundBody, string $contentType = self::contentTypes['dividePayerRefund'][0])
    {
        $request = $this->dividePayerRefundRequest($payerRefundId, $dividePayerRefundBody, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation dividePayerRefundAsync
     *
     * Divide payer refund
     *
     * @param  string $payerRefundId (required)
     * @param  \OpenAPI\Client\Model\DividePayerRefundBody $dividePayerRefundBody (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dividePayerRefund'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dividePayerRefundAsync($payerRefundId, $dividePayerRefundBody, string $contentType = self::contentTypes['dividePayerRefund'][0])
    {
        return $this->dividePayerRefundAsyncWithHttpInfo($payerRefundId, $dividePayerRefundBody, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation dividePayerRefundAsyncWithHttpInfo
     *
     * Divide payer refund
     *
     * @param  string $payerRefundId (required)
     * @param  \OpenAPI\Client\Model\DividePayerRefundBody $dividePayerRefundBody (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dividePayerRefund'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dividePayerRefundAsyncWithHttpInfo($payerRefundId, $dividePayerRefundBody, string $contentType = self::contentTypes['dividePayerRefund'][0])
    {
        $returnType = '';
        $request = $this->dividePayerRefundRequest($payerRefundId, $dividePayerRefundBody, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'dividePayerRefund'
     *
     * @param  string $payerRefundId (required)
     * @param  \OpenAPI\Client\Model\DividePayerRefundBody $dividePayerRefundBody (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dividePayerRefund'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function dividePayerRefundRequest($payerRefundId, $dividePayerRefundBody, string $contentType = self::contentTypes['dividePayerRefund'][0])
    {

        // verify the required parameter 'payerRefundId' is set
        if ($payerRefundId === null || (is_array($payerRefundId) && count($payerRefundId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payerRefundId when calling dividePayerRefund'
            );
        }

        // verify the required parameter 'dividePayerRefundBody' is set
        if ($dividePayerRefundBody === null || (is_array($dividePayerRefundBody) && count($dividePayerRefundBody) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dividePayerRefundBody when calling dividePayerRefund'
            );
        }


        $resourcePath = '/refunds/payer/{payerRefundId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($payerRefundId !== null) {
            $resourcePath = str_replace(
                '{' . 'payerRefundId' . '}',
                ObjectSerializer::toPathValue($payerRefundId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($dividePayerRefundBody)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($dividePayerRefundBody));
            } else {
                $httpBody = $dividePayerRefundBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOrderRefundById
     *
     * Get order refund by ID
     *
     * @param  string $orderRefundId orderRefundId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrderRefundById'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\GetOrderRefundByIdResponse
     */
    public function getOrderRefundById($orderRefundId, string $contentType = self::contentTypes['getOrderRefundById'][0])
    {
        list($response) = $this->getOrderRefundByIdWithHttpInfo($orderRefundId, $contentType);
        return $response;
    }

    /**
     * Operation getOrderRefundByIdWithHttpInfo
     *
     * Get order refund by ID
     *
     * @param  string $orderRefundId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrderRefundById'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\GetOrderRefundByIdResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrderRefundByIdWithHttpInfo($orderRefundId, string $contentType = self::contentTypes['getOrderRefundById'][0])
    {
        $request = $this->getOrderRefundByIdRequest($orderRefundId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\GetOrderRefundByIdResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\GetOrderRefundByIdResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GetOrderRefundByIdResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\GetOrderRefundByIdResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GetOrderRefundByIdResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOrderRefundByIdAsync
     *
     * Get order refund by ID
     *
     * @param  string $orderRefundId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrderRefundById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrderRefundByIdAsync($orderRefundId, string $contentType = self::contentTypes['getOrderRefundById'][0])
    {
        return $this->getOrderRefundByIdAsyncWithHttpInfo($orderRefundId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOrderRefundByIdAsyncWithHttpInfo
     *
     * Get order refund by ID
     *
     * @param  string $orderRefundId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrderRefundById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrderRefundByIdAsyncWithHttpInfo($orderRefundId, string $contentType = self::contentTypes['getOrderRefundById'][0])
    {
        $returnType = '\OpenAPI\Client\Model\GetOrderRefundByIdResponse';
        $request = $this->getOrderRefundByIdRequest($orderRefundId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrderRefundById'
     *
     * @param  string $orderRefundId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrderRefundById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getOrderRefundByIdRequest($orderRefundId, string $contentType = self::contentTypes['getOrderRefundById'][0])
    {

        // verify the required parameter 'orderRefundId' is set
        if ($orderRefundId === null || (is_array($orderRefundId) && count($orderRefundId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orderRefundId when calling getOrderRefundById'
            );
        }


        $resourcePath = '/refunds/order/{orderRefundId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($orderRefundId !== null) {
            $resourcePath = str_replace(
                '{' . 'orderRefundId' . '}',
                ObjectSerializer::toPathValue($orderRefundId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOrdersRefunds
     *
     * Get orders refunds
     *
     * @param  int $limit limit (optional, default to 10)
     * @param  string $startingAfter Universally unique identifier (UUID) v4 (optional)
     * @param  string $endingBefore Universally unique identifier (UUID) v4 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrdersRefunds'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\GetOrdersRefundsApiResponse
     */
    public function getOrdersRefunds($limit = 10, $startingAfter = null, $endingBefore = null, string $contentType = self::contentTypes['getOrdersRefunds'][0])
    {
        list($response) = $this->getOrdersRefundsWithHttpInfo($limit, $startingAfter, $endingBefore, $contentType);
        return $response;
    }

    /**
     * Operation getOrdersRefundsWithHttpInfo
     *
     * Get orders refunds
     *
     * @param  int $limit (optional, default to 10)
     * @param  string $startingAfter Universally unique identifier (UUID) v4 (optional)
     * @param  string $endingBefore Universally unique identifier (UUID) v4 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrdersRefunds'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\GetOrdersRefundsApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrdersRefundsWithHttpInfo($limit = 10, $startingAfter = null, $endingBefore = null, string $contentType = self::contentTypes['getOrdersRefunds'][0])
    {
        $request = $this->getOrdersRefundsRequest($limit, $startingAfter, $endingBefore, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\GetOrdersRefundsApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\GetOrdersRefundsApiResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GetOrdersRefundsApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\GetOrdersRefundsApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GetOrdersRefundsApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOrdersRefundsAsync
     *
     * Get orders refunds
     *
     * @param  int $limit (optional, default to 10)
     * @param  string $startingAfter Universally unique identifier (UUID) v4 (optional)
     * @param  string $endingBefore Universally unique identifier (UUID) v4 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrdersRefunds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrdersRefundsAsync($limit = 10, $startingAfter = null, $endingBefore = null, string $contentType = self::contentTypes['getOrdersRefunds'][0])
    {
        return $this->getOrdersRefundsAsyncWithHttpInfo($limit, $startingAfter, $endingBefore, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOrdersRefundsAsyncWithHttpInfo
     *
     * Get orders refunds
     *
     * @param  int $limit (optional, default to 10)
     * @param  string $startingAfter Universally unique identifier (UUID) v4 (optional)
     * @param  string $endingBefore Universally unique identifier (UUID) v4 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrdersRefunds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrdersRefundsAsyncWithHttpInfo($limit = 10, $startingAfter = null, $endingBefore = null, string $contentType = self::contentTypes['getOrdersRefunds'][0])
    {
        $returnType = '\OpenAPI\Client\Model\GetOrdersRefundsApiResponse';
        $request = $this->getOrdersRefundsRequest($limit, $startingAfter, $endingBefore, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrdersRefunds'
     *
     * @param  int $limit (optional, default to 10)
     * @param  string $startingAfter Universally unique identifier (UUID) v4 (optional)
     * @param  string $endingBefore Universally unique identifier (UUID) v4 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOrdersRefunds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getOrdersRefundsRequest($limit = 10, $startingAfter = null, $endingBefore = null, string $contentType = self::contentTypes['getOrdersRefunds'][0])
    {

        if ($limit !== null && $limit > 100) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling RefundsApi.getOrdersRefunds, must be smaller than or equal to 100.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling RefundsApi.getOrdersRefunds, must be bigger than or equal to 1.');
        }
        



        $resourcePath = '/orders/refunds';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $startingAfter,
            'startingAfter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $endingBefore,
            'endingBefore', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPayerRefundById
     *
     * Get payer refund by ID
     *
     * @param  string $payerRefundId payerRefundId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayerRefundById'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\GetPayerRefundByIdResponse
     */
    public function getPayerRefundById($payerRefundId, string $contentType = self::contentTypes['getPayerRefundById'][0])
    {
        list($response) = $this->getPayerRefundByIdWithHttpInfo($payerRefundId, $contentType);
        return $response;
    }

    /**
     * Operation getPayerRefundByIdWithHttpInfo
     *
     * Get payer refund by ID
     *
     * @param  string $payerRefundId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayerRefundById'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\GetPayerRefundByIdResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPayerRefundByIdWithHttpInfo($payerRefundId, string $contentType = self::contentTypes['getPayerRefundById'][0])
    {
        $request = $this->getPayerRefundByIdRequest($payerRefundId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\GetPayerRefundByIdResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\GetPayerRefundByIdResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GetPayerRefundByIdResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\GetPayerRefundByIdResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GetPayerRefundByIdResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPayerRefundByIdAsync
     *
     * Get payer refund by ID
     *
     * @param  string $payerRefundId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayerRefundById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPayerRefundByIdAsync($payerRefundId, string $contentType = self::contentTypes['getPayerRefundById'][0])
    {
        return $this->getPayerRefundByIdAsyncWithHttpInfo($payerRefundId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPayerRefundByIdAsyncWithHttpInfo
     *
     * Get payer refund by ID
     *
     * @param  string $payerRefundId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayerRefundById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPayerRefundByIdAsyncWithHttpInfo($payerRefundId, string $contentType = self::contentTypes['getPayerRefundById'][0])
    {
        $returnType = '\OpenAPI\Client\Model\GetPayerRefundByIdResponse';
        $request = $this->getPayerRefundByIdRequest($payerRefundId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPayerRefundById'
     *
     * @param  string $payerRefundId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPayerRefundById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPayerRefundByIdRequest($payerRefundId, string $contentType = self::contentTypes['getPayerRefundById'][0])
    {

        // verify the required parameter 'payerRefundId' is set
        if ($payerRefundId === null || (is_array($payerRefundId) && count($payerRefundId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payerRefundId when calling getPayerRefundById'
            );
        }


        $resourcePath = '/refunds/payer/{payerRefundId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($payerRefundId !== null) {
            $resourcePath = str_replace(
                '{' . 'payerRefundId' . '}',
                ObjectSerializer::toPathValue($payerRefundId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation refundOrder
     *
     * Refund order
     *
     * @param  string $orderId orderId (required)
     * @param  \OpenAPI\Client\Model\RefundOrderApiBody $refundOrderApiBody refundOrderApiBody (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['refundOrder'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\RefundOrderResponse
     */
    public function refundOrder($orderId, $refundOrderApiBody, string $contentType = self::contentTypes['refundOrder'][0])
    {
        list($response) = $this->refundOrderWithHttpInfo($orderId, $refundOrderApiBody, $contentType);
        return $response;
    }

    /**
     * Operation refundOrderWithHttpInfo
     *
     * Refund order
     *
     * @param  string $orderId (required)
     * @param  \OpenAPI\Client\Model\RefundOrderApiBody $refundOrderApiBody (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['refundOrder'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\RefundOrderResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function refundOrderWithHttpInfo($orderId, $refundOrderApiBody, string $contentType = self::contentTypes['refundOrder'][0])
    {
        $request = $this->refundOrderRequest($orderId, $refundOrderApiBody, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\RefundOrderResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\RefundOrderResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\RefundOrderResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\RefundOrderResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RefundOrderResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation refundOrderAsync
     *
     * Refund order
     *
     * @param  string $orderId (required)
     * @param  \OpenAPI\Client\Model\RefundOrderApiBody $refundOrderApiBody (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['refundOrder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function refundOrderAsync($orderId, $refundOrderApiBody, string $contentType = self::contentTypes['refundOrder'][0])
    {
        return $this->refundOrderAsyncWithHttpInfo($orderId, $refundOrderApiBody, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation refundOrderAsyncWithHttpInfo
     *
     * Refund order
     *
     * @param  string $orderId (required)
     * @param  \OpenAPI\Client\Model\RefundOrderApiBody $refundOrderApiBody (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['refundOrder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function refundOrderAsyncWithHttpInfo($orderId, $refundOrderApiBody, string $contentType = self::contentTypes['refundOrder'][0])
    {
        $returnType = '\OpenAPI\Client\Model\RefundOrderResponse';
        $request = $this->refundOrderRequest($orderId, $refundOrderApiBody, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'refundOrder'
     *
     * @param  string $orderId (required)
     * @param  \OpenAPI\Client\Model\RefundOrderApiBody $refundOrderApiBody (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['refundOrder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function refundOrderRequest($orderId, $refundOrderApiBody, string $contentType = self::contentTypes['refundOrder'][0])
    {

        // verify the required parameter 'orderId' is set
        if ($orderId === null || (is_array($orderId) && count($orderId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $orderId when calling refundOrder'
            );
        }

        // verify the required parameter 'refundOrderApiBody' is set
        if ($refundOrderApiBody === null || (is_array($refundOrderApiBody) && count($refundOrderApiBody) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $refundOrderApiBody when calling refundOrder'
            );
        }


        $resourcePath = '/orders/{orderId}/refunds';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($orderId !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($orderId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($refundOrderApiBody)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($refundOrderApiBody));
            } else {
                $httpBody = $refundOrderApiBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
